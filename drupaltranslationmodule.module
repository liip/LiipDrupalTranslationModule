<?php

use Assert\Assertion;
use Liip\Drupal\Modules\DrupalConnector\ConnectorFactory;

/**
 * Modifies a translation source in the set of translations.
 *
 * @param string $source
 * @param array $data
 *
 * @throws InvalidArgumentException
 */
function drupaltranslationmodule_modifyTranslationSource($source, array $data)
{
    /** @var \Liip\Drupal\Modules\DrupalConnector\ConnectorFactory $factory  */
    $factory = new ConnectorFactory();

    _drupaltranslationmodule_verifyDataSet($data);

    $data = _drupaltranslationmodule_translation_complete_data($source, $data, $factory);

    _drupaltranslationmodule_replaceKey($source, $data, $factory);
}

/**
 * Completes the translation data set with information received from the database.
 *
 * @param string $source
 * @param array $data
 * @param ConnectorFactory $factory
 *
 * @throws InvalidArgumentException in case the translation was not found in the database.
 * @return array
 */
function _drupaltranslationmodule_translation_complete_data($source, array $data, ConnectorFactory $factory)
{
    if (! _drupaltranslationmodule_translation_source_exist($source, $factory)) {
        throw new InvalidArgumentException('Translation source ('. $source .') does not exists!');
    }

    $dbRecord = _drupaltranslationmodule_get_translation_source($source, $factory);

    return $data += $dbRecord;
}

/**
 * Adds a translation source to the list of translation keys used by the t function of drupal.
 *
 * @param array $data
 * @throws \InvalidArgumentException
 */
function drupaltranslationmodule_storeTranslationSource(array $data)
{
    /** @var \Liip\Drupal\Modules\DrupalConnector\ConnectorFactory $factory  */
    $factory = new ConnectorFactory();

    _drupaltranslationmodule_verifyDataSet($data);

    if (_drupaltranslationmodule_translation_source_exist($data['source'], $factory)) {
        throw new InvalidArgumentException('Translation source ('. $data['source'] .') already exists!', 409);
    }

    _drupaltranslationmodule_addKey($data, $factory);
}

/**
 * Verifies that the given data set meet the expectations.
 *
 * @param array $data
 */
function _drupaltranslationmodule_verifyDataSet(array $data)
{
    /** @var \Assert\Assertion $assertions  */
    $assertions = new Assertion();

    $assertions->notEmpty($data['source'], 'The passed variable representing the translation key must not be empty.');
}

/**
 * Determines, if the given key is already registered in the translation database table.
 *
 * @param string $source
 * @param Liip\Drupal\Modules\DrupalConnector\ConnectorFactory $factory
 *
 * @return bool
 */
function _drupaltranslationmodule_translation_source_exist($source, ConnectorFactory $factory)
{
    $lid = _drupaltranslationmodule_get_translation_source_lid($source, $factory);
    return (false === $lid) ? false : true;
}

/**_drupaltranslationmodule_get_translation_source_lid
 * Provides the unique database identifier of the provided translation source.
 *
 * @param string $source
 * @param Liip\Drupal\Modules\DrupalConnector\ConnectorFactory $factory
 *
 * @return integer|false
 */
function _drupaltranslationmodule_get_translation_source_lid($source, ConnectorFactory $factory)
{
    $result = _drupaltranslationmodule_get_translation_source($source, $factory);

    return (!isset($result['lid'])) ? false : $result['lid'];
}

function _drupaltranslationmodule_get_translation_source($source, ConnectorFactory $factory)
{
    /** @var $dcdb  */
    $dcdb = $factory->getDatabaseConnector();

    return $dcdb->db_query(
        "SELECT *
          FROM {locales_source}
         WHERE source LIKE :source",

        array(':source' => $source)

    )->fetchAssoc();
}

/**
 * Adds a translation source to the drupal database.
 *
 * @param array $data
 * @param Liip\Drupal\Modules\DrupalConnector\ConnectorFactory $factory
 *
 * @return boolean
 */
function _drupaltranslationmodule_addKey(array $data, ConnectorFactory $factory)
{
    /** @var \Liip\Drupal\Modules\DrupalConnector\Database $dcdb  */
    $dcdb = $factory->getDatabaseConnector();

    $data = _drupaltranslationmodule_initFieldset($data);

    return $dcdb
        ->db_insert('locales_source')
        ->fields(array(
            'location' => $data['location'],
            'textgroup' => $data['textgroup'],
            'source' => $data['source'],
            'context' => $data['context'],
            'version' => $data['version'],
        ))
        ->execute();
}

/**
 * Replaces a translation source in the drupal database.
 *
 * @param string $source
 * @param array $data
 * @param Liip\Drupal\Modules\DrupalConnector\ConnectorFactory $factory
 *
 * @return boolean
 */
function _drupaltranslationmodule_replaceKey($source, array $data, ConnectorFactory $factory)
{
    /** @var \Liip\Drupal\Modules\DrupalConnector\Database $dcdb  */
    $dcdb = $factory->getDatabaseConnector();

    $data = _drupaltranslationmodule_initFieldset($data);

    return $dcdb
        ->db_update('locales_source')
        ->fields(array(
            'location' => $data['location'],
            'textgroup' => $data['textgroup'],
            'source' => $data['source'],
            'context' => $data['context'],
            'version' => $data['version'],
        ))
        ->condition('source', $source, '=')
        ->execute();
}

/**
 * @param array $data
 * @return array
 *
 * @throws \InvalidArgumentException
 */
function _drupaltranslationmodule_initFieldset(array $data)
{
    $default = array(
        'location' => null,
        'textgroup' => 'default',
        'source' => '',
        'context' => '',
        'version' => 'none',
    );

    foreach($default as $field => $value) {

        if ($field == 'source' && empty($data[$field])) {
            throw new InvalidArgumentException('Source of the translation to be stored must not be empty.');
        }

        if (empty($data[$field])) {
            $data[$field] = $value;
        }
    }

    return $data;
}

/**
 * Gets all nodes in a given translation set.
 *
 * @param $tnid
 *   The translation source nid of the translation set, the identifier of the
 *   node used to derive all translations in the set.
 *
 * @return
 *   Array of partial node objects (nid, title, language) representing all
 *   nodes in the translation set, in effect all translations of node $tnid,
 *   including node $tnid itself. Because these are partial nodes, you need to
 *   node_load() the full node, if you need more properties. The array is
 *   indexed by language code.
 */
function drupaltranslationmodule_node_get_translations($tnid, ConnectorFactory $factory)
{
    /** @var $dcdb  */
    $dcdb = $factory->getDatabaseConnector();

    /** @var $dcb  */
    $dcb = $factory->getBootstrapConnector();

    /** @var $dcc  */
    $dcc = $factory->getCommonConnector();

    if (is_numeric($tnid) && $tnid) {
        $translations = & $dcb->drupal_static(__FUNCTION__, array());

        if (!isset($translations[$tnid])) {
            $translations[$tnid] = array();
            $result = $dcdb->db_select('node', 'n')
                ->fields('n', array('nid', 'type', 'uid', 'status', 'title', 'language'))
                ->condition('n.tnid', $tnid)
                ->addTag('node_access')
                ->execute();

            foreach ($result as $node) {
                $langcode = $dcc->entity_language('node', $node);
                $translations[$tnid][$langcode] = $node;
            }
        }

        return $translations[$tnid];
    }
}
